#!/bin/bash -ex

# define USER environment variable from 3 possible sources, in order of priority (first one wins)
# 1. USER environment variable passed in from pre-existing $USER environment variable
# 2. USER environment variable passed in from $(whoami) command
# 3. USER environment variable statically set to "vscode" if #2 returns root
export USER="${USER:-$(whoami)}"
if [ "$USER" = "root" ]; then
    export USER="vscode"
fi

#################################################################################
# Helper Functions
#################################################################################

# Load environment variables into tmux session
load_env_to_tmux() {
    local env_file="$1"
    local session_name="$2"

    if [[ -f "$env_file" && -r "$env_file" ]]; then
        while IFS='=' read -r name value || [ -n "$name" ]; do
            if [ -n "$name" ]; then
                # Properly escape values
                printf -v value_esc '%q' "$value"
                tmux set-environment -t "$session_name" "$name" "$value_esc"
            fi
        done < "$env_file"
    else
        echo "Error: Environment file $env_file not found or not readable"
        exit 1
    fi
}

# Create necessary directories for SSH
create_ssh_directories() {
    mkdir -p "${ssh_host_identity_path}"
    mkdir -p "${ssh_user_identity_path}"
    sudo chmod -R 0700 "${ssh_host_identity_path}"
    sudo chmod -R 0700 "${ssh_user_identity_path}"
    sudo mkdir -p /var/run/sshd
}

# Function to generate SSH host keys if they don't exist
run_host_ssh_keygen() {
    local ssh_key_types=("ecdsa" "rsa" "ed25519")
    for key_type in "${ssh_key_types[@]}"; do
        local key_file="${ssh_host_identity_path}/ssh_host_${key_type}_key"
        echo "Generating SSH host key for ${key_type}"
        sudo /usr/bin/ssh-keygen -q -t "$key_type" -f "$key_file" -C '' -N ''
    done
}

# Function to handle SSH host keys
run_host_ssh_identity() {
    local ssh_key_types=("ecdsa" "rsa" "ed25519")
    local key_missing=false

    for key_type in "${ssh_key_types[@]}"; do
        local key_file="${ssh_host_identity_path}/ssh_host_${key_type}_key"
        echo "Checking for key: $key_file"
        if ! sudo test -f "$key_file"; then
            echo "SSH host key for ${key_type} not found, will generate new key."
            key_missing=true
        else
            echo "Found existing SSH host key for ${key_type}"
        fi
    done

    if [ "$key_missing" = true ]; then
        echo "One or more SSH host keys missing, generating keys..."
        run_host_ssh_keygen
    else
        echo "Using existing SSH host keys"
    fi

    sudo chmod -R 0600 "${ssh_host_identity_path}"
    sudo chown -R root:root "${ssh_host_identity_path}"
    sudo bash -c "cp -rf ${ssh_host_identity_path}/* /etc/ssh/"
}

# Function to start SSHD
run_sshd() {
    create_ssh_directories
    run_host_ssh_identity
    echo "Starting sshd..."
    sudo bash -c "/usr/sbin/sshd -e -f /etc/ssh/sshd_config -E /dev/stdout" || bash -c "echo 'Error: sshd failed to start'; exit 1"
}

# Function to start and keep tmux session alive
run_tmux_keepalive() {
    local session_name="$1"
    while true; do
        if ! tmux has-session -t "$session_name" 2>/dev/null; then
            tmux new-session -d -s "$session_name"
            load_env_to_tmux "${HOME}/.env_tmux" "$session_name"
            echo "Restarted tmux session: $session_name"
        fi
        sleep 5
    done
}

# Function to start TTYD
run_ttyd() {
    ttyd --writable -t fontFamily="'FiraCode Nerd Font Mono'" fish -c "while true; do connect; sleep 5; done" 2>/dev/null &
}

#################################################################################
# Main Execution
#################################################################################

# Base Variables
export dir_platform=".platform"
export ssh_host_identity_path="/home/${USER}/${dir_platform}/secrets/ssh/host"
export ssh_user_identity_path="/home/${USER}/${dir_platform}/secrets/ssh/user"

# Validate environment variables
if [ -z "${USER}" ]; then
    echo "Error: USER environment variable not set"
    exit 1
fi

# End User Configuration
echo "user: $USER:$(whoami)"

# Save environment variables to file for tmux to load
printenv > "${HOME}/.env_tmux"
chmod 600 "${HOME}/.env_tmux"

# Run functions
run_sshd
run_ttyd
run_tmux_keepalive "konductor" > /dev/null 2>&1 &
sleep infinity

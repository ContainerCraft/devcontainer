#!/bin/bash
# Log to both stdout and /tmp/konductor.log
exec > >(tee -a /tmp/konductor.log) 2>&1

#################################################################################
# Configuration
#################################################################################
readonly DIR_PLATFORM=".platform"
readonly USER_HOME="/home/${USER:-ubuntu}"
readonly SSH_HOST_IDENTITY_PATH="${USER_HOME}/${DIR_PLATFORM}/secrets/ssh/host"
readonly SSH_USER_IDENTITY_PATH="${USER_HOME}/${DIR_PLATFORM}/secrets/ssh/user"
readonly ENV_FILE="${USER_HOME}/.env"
readonly SSH_KEY_TYPES=("ecdsa" "rsa" "ed25519")
readonly TMUX_CHECK_INTERVAL=5

#################################################################################
# Helper Functions
#################################################################################

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Instead of exiting, log errors and continue.
error() {
    log "ERROR: $1"
}

setup_user() {
    # Define USER from various sources in priority order
    export USER="${USER:-$(whoami)}"
    if [ "$USER" = "root" ]; then
        export USER="ubuntu"
    fi
    
    # Validate user setup
    if [ -z "${USER}" ]; then
        error "USER environment variable not set"
    fi
    
    log "Running as user: $USER (current: $(whoami))"
}

save_environment() {
    log "Saving environment variables to ${ENV_FILE}"
    env | grep -Ev '^(_=|PWD=|SHLVL=|SHELL=)' > "${ENV_FILE}" || true
    chmod 600 "${ENV_FILE}" || true
}

#################################################################################
# SSH Setup Functions
#################################################################################

create_ssh_directories() {
    log "Creating SSH directories"
    mkdir -p "${SSH_HOST_IDENTITY_PATH}" "${SSH_USER_IDENTITY_PATH}" /var/run/sshd || true
    sudo chmod -R 0700 "${SSH_HOST_IDENTITY_PATH}" "${SSH_USER_IDENTITY_PATH}" || true
}

generate_ssh_host_key() {
    local key_type="$1"
    local key_file="${SSH_HOST_IDENTITY_PATH}/ssh_host_${key_type}_key"
    log "Generating SSH host key for ${key_type}"
    sudo ssh-keygen -q -t "$key_type" -f "$key_file" -C '' -N '' || \
        log "Warning: Failed to generate ${key_type} key"
}

setup_host_ssh_identity() {
    log "Setting up SSH host identity"
    for key_type in "${SSH_KEY_TYPES[@]}"; do
        local key_file="${SSH_HOST_IDENTITY_PATH}/ssh_host_${key_type}_key"
        if ! sudo test -f "$key_file"; then
            generate_ssh_host_key "$key_type"
        fi
    done

    # Set permissions on the SSH host identity directory
    sudo chmod -R 0600 "${SSH_HOST_IDENTITY_PATH}" || true
    sudo chown -R root:root "${SSH_HOST_IDENTITY_PATH}" || true

    # Only copy keys if they exist
    if ls "${SSH_HOST_IDENTITY_PATH}"/* 1>/dev/null 2>&1; then
        sudo cp -rf "${SSH_HOST_IDENTITY_PATH}"/* /etc/ssh/ || \
            log "Warning: Failed to copy SSH host keys to /etc/ssh/"
    else
        log "Warning: No SSH host keys found in ${SSH_HOST_IDENTITY_PATH} to copy to /etc/ssh/"
    fi
}

setup_user_ssh() {
    local ssh_dir="${USER_HOME}/.ssh"
    local ssh_key_file="${ssh_dir}/id_rsa"

    log "Setting up user SSH configuration"
    mkdir -p "${ssh_dir}" || true
    chmod 700 "${ssh_dir}" || true

    # Generate user SSH key if needed
    if [ ! -f "${ssh_key_file}" ]; then
        log "Generating new SSH key for user ${USER}"
        sudo -u "${USER}" ssh-keygen -t rsa -b 4096 -f "${ssh_key_file}" -q -N "" || \
            log "Warning: Failed to generate user SSH key"
    fi

    chmod 600 "${ssh_key_file}" || true
    chmod 644 "${ssh_key_file}.pub" || true

    # Setup GitHub keys if configured
    if [ -n "${GITHUB_USER:-}" ]; then
        log "Fetching SSH keys for GitHub user ${GITHUB_USER}"
        if curl -sL "https://github.com/${GITHUB_USER}.keys" > "${ssh_dir}/authorized_keys"; then
            chmod 600 "${ssh_dir}/authorized_keys" || true
        else
            log "Warning: Failed to fetch GitHub keys for ${GITHUB_USER}"
        fi
    fi
}

#################################################################################
# Service Management Functions
#################################################################################

start_sshd() {
    log "Starting SSH daemon"
    create_ssh_directories
    setup_host_ssh_identity
    sudo /usr/sbin/sshd -e -f /etc/ssh/sshd_config || log "Warning: SSHD failed to start"
}

manage_tmux_session() {
    local session_name="$1"
    
    while true; do
        if ! tmux has-session -t "$session_name" 2>/dev/null; then
            log "Creating new tmux session: $session_name"
            tmux new-session -d -s "$session_name" || log "Warning: Failed to create tmux session"
            sleep 1 || true
            tmux send-keys -t "$session_name" "source ${ENV_FILE}" C-m || \
                log "Warning: Failed to send environment to tmux session"
        fi
        sleep "${TMUX_CHECK_INTERVAL}" || true
    done
}

start_ttyd() {
    log "Starting TTYD service"
    while true; do
        if ! pgrep ttyd > /dev/null; then
            ( ttyd --writable -t fontFamily="'monospace'" connect 2>/dev/null || \
              log "Warning: Failed to start ttyd" ) &
        fi
        sleep "${TMUX_CHECK_INTERVAL}" || true
    done
}

#################################################################################
# Main Execution
#################################################################################

main() {
    # Basic setup
    setup_user
    save_environment

    # Start SSH and user SSH configuration
    start_sshd
    setup_user_ssh
    
    # Launch background services
    start_ttyd &
    manage_tmux_session "konductor" > /dev/null 2>&1 &

    log "Container initialization complete"
    # Keep the container running indefinitely
    exec sleep infinity
}

main "$@"

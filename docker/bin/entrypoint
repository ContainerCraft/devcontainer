#!/bin/bash

# Debug configuration
DEBUG=${DEBUG:-0} # Default to debug off
[[ $DEBUG -eq 1 ]] && set -x

# Log to both stdout and /tmp/konductor.log
exec > >(tee -a /tmp/konductor.log) 2>&1

#################################################################################
# Preliminary User Setup
#################################################################################
# If running as root, set USER to "ubuntu"; otherwise, default to the current user.
if [ "$(whoami)" = "root" ]; then
	USER="ubuntu"
else
	USER="${USER:-$(whoami)}"
fi

# Determine the user's home directory (using getent when available)
USER_HOME=$(getent passwd "${USER}" | cut -d: -f6)
if [ -z "${USER_HOME}" ]; then
	USER_HOME="/home/${USER}"
fi

#################################################################################
# Configuration
#################################################################################
readonly DIR_PLATFORM=".platform"
readonly SSH_HOST_IDENTITY_PATH="${USER_HOME}/${DIR_PLATFORM}/secrets/ssh/host"
readonly SSH_USER_IDENTITY_PATH="${USER_HOME}/${DIR_PLATFORM}/secrets/ssh/user"
readonly ENV_FILE="${USER_HOME}/.env"
readonly SSH_KEY_TYPES=("ecdsa" "rsa" "ed25519")
readonly CHECK_INTERVAL=15

#################################################################################
# Helper Functions
#################################################################################

log() {
	echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

debug() {
	[[ $DEBUG -eq 1 ]] && log "DEBUG: $1"
}

error() {
	log "ERROR: $1"
}

setup_user() {
	# We already set USER and USER_HOME above. Now verify the user exists.
	if [ -z "${USER}" ] || ! id "${USER}" >/dev/null 2>&1; then
		error "User ${USER} not found"
		return 1
	fi

	log "Running as user: ${USER} (current: $(whoami))"

	# Ensure tmux directory exists with correct permissions
	local tmux_dir="/tmp/tmux-$(id -u "${USER}")"
	mkdir -p "${tmux_dir}"
	chmod 700 "${tmux_dir}"
	chown "${USER}:${USER}" "${tmux_dir}"
}

save_environment() {
	log "Saving environment variables to ${ENV_FILE}"
	mkdir -p "$(dirname "${ENV_FILE}")"
	# Filter out session-specific and potentially sensitive variables
	env | grep -Ev '^(_=|PWD=|SHLVL=|SHELL=|HOME=|SSH_|AWS_|GITHUB_TOKEN)' >"${ENV_FILE}"
	chmod 600 "${ENV_FILE}"
	chown "${USER}:${USER}" "${ENV_FILE}" 2>/dev/null || true
}

#################################################################################
# SSH Functions
#################################################################################

create_ssh_directories() {
	for dir in "${SSH_HOST_IDENTITY_PATH}" "${SSH_USER_IDENTITY_PATH}" "/var/run/sshd"; do
		mkdir -p "${dir}"
		chmod 0700 "${dir}" 2>/dev/null || true
	done
}

generate_ssh_host_key() {
	local key_type="$1"
	local key_file="${SSH_HOST_IDENTITY_PATH}/ssh_host_${key_type}_key"

	if [ ! -f "${key_file}" ]; then
		sudo ssh-keygen -q -t "$key_type" -f "$key_file" -C '' -N '' || true
	fi
}

setup_host_ssh_identity() {
	mkdir -p "${SSH_HOST_IDENTITY_PATH}"

	for key_type in "${SSH_KEY_TYPES[@]}"; do
		generate_ssh_host_key "$key_type"
	done

	if [ -d "${SSH_HOST_IDENTITY_PATH}" ] && [ "$(ls -A "${SSH_HOST_IDENTITY_PATH}" 2>/dev/null)" ]; then
		sudo cp -rf "${SSH_HOST_IDENTITY_PATH}"/* /etc/ssh/
		sudo chmod 600 /etc/ssh/ssh_host_*_key
		sudo chmod 644 /etc/ssh/ssh_host_*_key.pub
	fi
}

setup_user_ssh() {
	local ssh_dir="${USER_HOME}/.ssh"
	local ssh_key_file="${ssh_dir}/id_rsa"

	mkdir -p "${ssh_dir}"
	chmod 700 "${ssh_dir}"
	chown "${USER}:${USER}" "${ssh_dir}" 2>/dev/null || true

	if [ ! -f "${ssh_key_file}" ]; then
		sudo -u "${USER}" ssh-keygen -t rsa -b 4096 -f "${ssh_key_file}" -q -N ""
		chmod 600 "${ssh_key_file}"
		chmod 644 "${ssh_key_file}.pub"
		chown "${USER}:${USER}" "${ssh_key_file}"* 2>/dev/null || true
	fi

	if [ -n "${GITHUB_USER:-}" ]; then
		local keys_fetched=false
		for i in {1..3}; do
			if curl -sL --connect-timeout 5 "https://github.com/${GITHUB_USER}.keys" >"${ssh_dir}/authorized_keys"; then
				keys_fetched=true
				break
			fi
			sleep 2
		done
		if ! $keys_fetched; then
			error "Failed to fetch GitHub keys for ${GITHUB_USER} after 3 attempts"
		fi
		chmod 600 "${ssh_dir}/authorized_keys"
		chown "${USER}:${USER}" "${ssh_dir}/authorized_keys" 2>/dev/null || true
	fi
}

#################################################################################
# Service Functions
#################################################################################

start_sshd() {
	create_ssh_directories
	setup_host_ssh_identity
	sudo /usr/sbin/sshd -e -f /etc/ssh/sshd_config || true
}

manage_tmux_session() {
	local session_name="${1:-konductor}"

	create_tmux_session() {
		log "Creating new tmux session: ${session_name}"
		tmux new-session -d -s "${session_name}" || true
		log "Created tmux session: ${session_name}"
	}

	# Ensure the session exists at startup.
	if ! tmux has-session -t "${session_name}" 2>/dev/null; then
		create_tmux_session
	fi

	# Loop forever, reâ€‘creating the session if it goes away.
	while :; do
		if ! tmux has-session -t "${session_name}" 2>/dev/null; then
			log "Session ${session_name} is no longer active, recreating."
			create_tmux_session
		else
			debug "Session ${session_name} is still active."
		fi
		sleep "${CHECK_INTERVAL}" || true
	done
}

start_ttyd() {
	if command -v ttyd >/dev/null 2>&1; then
		while :; do
			if ! pgrep ttyd >/dev/null; then
				ttyd --writable -t fontFamily=monospace connect 2>/dev/null &
			fi
			sleep "${CHECK_INTERVAL}" || true
		done
	fi
}

cleanup() {
	pkill -P $$ 2>/dev/null || true
	pkill ttyd 2>/dev/null || true
}

#################################################################################
# Main
#################################################################################

main() {
	trap cleanup EXIT INT TERM

	# Core Initialization
	setup_user || true
	save_environment || true
	start_sshd || true
	setup_user_ssh || true

	# Start background services.
	start_ttyd &
	manage_tmux_session "konductor" &

	log "Container initialization complete."

	sleep infinity
}

main "$@"
